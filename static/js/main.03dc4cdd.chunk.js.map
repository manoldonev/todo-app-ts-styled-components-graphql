{"version":3,"sources":["generated/index.ts","context/todo.tsx","components/TodoList/TodoItem/SwipeToDelete.tsx","components/TodoList/TodoItem/TodoItem.tsx","components/TodoList/useTodos.ts","reportWebVitals.ts","components/TodoList/Header/Header.tsx","components/common/ImageButton/ImageButton.tsx","components/TodoList/Actions/Actions.tsx","components/TodoList/Filter/Filter.tsx","components/TodoList/Pagination/Pagination.tsx","components/TodoList/Footer/Footer.tsx","components/TodoList/InputBox/InputBox.tsx","components/TodoList/SearchBox/SearchBox.tsx","components/TodoList/InputToggle/InputToggle.tsx","components/TodoList/TodoList.tsx","components/App/queryClient.ts","components/App/App.tsx","index.tsx"],"names":["MathOptions","fetcher","query","variables","a","fetch","method","body","JSON","stringify","res","json","errors","message","Error","data","ActionType","FilterMode","InputMode","useTodosQuery","options","useQuery","undefined","Wrapper","styled","div","BackgroundLayer","ForegroundLayer","SwipeToDelete","children","threshold","onSwiped","onTap","foregroundRef","useRef","backgroundRef","swipeableHandlers","useSwipeable","trackMouse","preventDefaultTouchmoveEvent","onSwipeStart","current","style","transition","transform","onSwiping","eventData","deltaX","opacity","Math","min","abs","toFixed","left","offsetWidth","dir","LEFT","ref","icon","faTrashAlt","fixedWidth","marginRight","onMouseDown","element","ListItem","li","props","done","Checkbox","input","attrs","type","Label","label","TodoItem","id","task","queryClient","useQueryClient","onSuccess","invalidateQueries","useMutation","updateTodo","mutate","useDeleteTodoMutation","deleteTodo","htmlFor","checked","TodoStateContext","React","createContext","TodoDispatchContext","todoReducer","state","action","TogglePage","produce","draft","numericPayload","currentPage","ToggleFilter","filterKey","stringPayload","filterMode","ToggleMode","inputMode","All","SortDirection","TodoProvider","reducer","useReducer","pageSize","hasMore","Add","dispatch","Provider","value","useTodoState","context","useContext","useTodoDispatch","onPerfEntry","useTodos","Active","done_eq","Done","queryVariables","page","limit","sort","direction","Descending","keepPreviousData","staleTime","isFetching","isPreviousData","nextData","hasMoreData","todos","length","StyledHeader","h1","Header","ImageButton","button","ActionList","ul","ActionItem","ActionButton","active","Actions","mode","handleClick","e","parseInt","currentTarget","onClick","faPlus","Search","faSearch","FilterList","FilterItem","Button","Filter","Object","entries","map","key","toggleFilter","PaginationList","PaginationItem","Pagination","max","disabled","faChevronLeft","faChevronRight","StyledFooter","Footer","StyledInput","InputBox","useState","setValue","placeholder","onChange","target","onKeyUp","code","trim","user_id","SearchBox","SearchItem","InputToggle","Section","section","StyledList","TodoList","todo","QueryClient","queryCache","QueryCache","onError","error","toast","App","client","initialIsOpen","ReactDOM","render","StrictMode","document","getElementById","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.03dc4cdd.chunk.js","sourcesContent":["import { useMutation, UseMutationOptions, useQuery, UseQueryOptions } from 'react-query';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n\nfunction fetcher<TData, TVariables>(query: string, variables?: TVariables) {\n  return async (): Promise<TData> => {\n    const res = await fetch(\"https://fakeql.com/graphql/0bfe961b5d76d8f8ae63d882a1fadb8b\", {\n    method: \"POST\",\n      body: JSON.stringify({ query, variables }),\n    });\n\n    const json = await res.json();\n\n    if (json.errors) {\n      const { message } = json.errors[0];\n\n      throw new Error(message);\n    }\n\n    return json.data;\n  }\n}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `DateTime` scalar represents a date and time following the ISO 8601 standard */\n  DateTime: any;\n  _Any: any;\n  _FieldSet: any;\n};\n\nexport type CreateTodoInput = {\n  done: Scalars['Boolean'];\n  task: Scalars['String'];\n  user_id: Scalars['ID'];\n};\n\nexport type CreateUserInput = {\n  firstname: Scalars['String'];\n};\n\nexport enum MathOptions {\n  Ceil = 'CEIL',\n  Floor = 'FLOOR',\n  Round = 'ROUND'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  _createSnapshot: Scalars['Boolean'];\n  createTodo: Todo;\n  createUser: User;\n  deleteTodo: Scalars['ID'];\n  deleteUser: Scalars['ID'];\n  updateTodo: Todo;\n  updateUser: User;\n};\n\n\nexport type Mutation_CreateSnapshotArgs = {\n  key: Scalars['String'];\n};\n\n\nexport type MutationCreateTodoArgs = {\n  input: CreateTodoInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDeleteTodoArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type MutationUpdateTodoArgs = {\n  id: Scalars['ID'];\n  input: UpdateTodoInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  id: Scalars['ID'];\n  input: UpdateUserInput;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  _aggregation: Scalars['Float'];\n  _entities: Array<Maybe<_Entity>>;\n  _service: _Service;\n  _typeDefs: Scalars['String'];\n  todo?: Maybe<Todo>;\n  todos?: Maybe<Array<Maybe<Todo>>>;\n  user?: Maybe<User>;\n  users?: Maybe<Array<Maybe<User>>>;\n};\n\n\nexport type Query_AggregationArgs = {\n  field?: Maybe<Scalars['String']>;\n  ref?: Maybe<Scalars['String']>;\n  stat: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n};\n\n\nexport type Query_EntitiesArgs = {\n  representations: Array<Scalars['_Any']>;\n};\n\n\nexport type QueryTodoArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTodosArgs = {\n  dir?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  page?: Maybe<Scalars['Int']>;\n  ref?: Maybe<Scalars['String']>;\n  sort?: Maybe<Scalars['String']>;\n  where?: Maybe<TodosWhere>;\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryUsersArgs = {\n  dir?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  page?: Maybe<Scalars['Int']>;\n  ref?: Maybe<Scalars['String']>;\n  sort?: Maybe<Scalars['String']>;\n  where?: Maybe<UsersWhere>;\n};\n\nexport type Todo = {\n  __typename?: 'Todo';\n  _boolean: Scalars['Boolean'];\n  _float: Scalars['Float'];\n  _int: Scalars['Int'];\n  _nest: Todo;\n  _string: Scalars['String'];\n  done: Scalars['Boolean'];\n  id: Scalars['ID'];\n  task: Scalars['String'];\n  user: User;\n};\n\n\nexport type Todo_FloatArgs = {\n  fixed?: Maybe<Scalars['Int']>;\n  max?: Maybe<Scalars['Float']>;\n  min?: Maybe<Scalars['Float']>;\n};\n\n\nexport type Todo_IntArgs = {\n  max?: Maybe<Scalars['Int']>;\n  min?: Maybe<Scalars['Int']>;\n};\n\n\nexport type Todo_StringArgs = {\n  casing?: Maybe<Scalars['String']>;\n  full?: Maybe<Scalars['Boolean']>;\n  length?: Maybe<Scalars['Int']>;\n  locale?: Maybe<Scalars['String']>;\n  max?: Maybe<Scalars['Int']>;\n  min?: Maybe<Scalars['Int']>;\n  nationality?: Maybe<Scalars['String']>;\n  pool?: Maybe<Scalars['String']>;\n  sentences?: Maybe<Scalars['Int']>;\n  syllables?: Maybe<Scalars['Int']>;\n  template?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  words?: Maybe<Scalars['Int']>;\n};\n\n\nexport type TodoTaskArgs = {\n  length?: Maybe<Scalars['Int']>;\n};\n\nexport type TodosWhere = {\n  and?: Maybe<Array<TodosWhere>>;\n  done_eq?: Maybe<Scalars['Boolean']>;\n  done_exists?: Maybe<Scalars['Boolean']>;\n  id_eq?: Maybe<Scalars['Float']>;\n  id_ge?: Maybe<Scalars['Float']>;\n  id_gt?: Maybe<Scalars['Float']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_le?: Maybe<Scalars['Float']>;\n  id_lt?: Maybe<Scalars['Float']>;\n  id_neq?: Maybe<Scalars['Float']>;\n  id_nin?: Maybe<Array<Scalars['ID']>>;\n  like?: Maybe<Scalars['String']>;\n  not?: Maybe<Array<TodosWhere>>;\n  or?: Maybe<Array<TodosWhere>>;\n  search?: Maybe<Scalars['String']>;\n  task_contains?: Maybe<Scalars['String']>;\n  task_endswith?: Maybe<Scalars['String']>;\n  task_eq?: Maybe<Scalars['String']>;\n  task_exists?: Maybe<Scalars['Boolean']>;\n  task_in?: Maybe<Array<Scalars['String']>>;\n  task_neq?: Maybe<Scalars['String']>;\n  task_nin?: Maybe<Array<Scalars['String']>>;\n  task_startswith?: Maybe<Scalars['String']>;\n  user_and?: Maybe<Array<UsersWhere>>;\n  user_firstname_contains?: Maybe<Scalars['String']>;\n  user_firstname_endswith?: Maybe<Scalars['String']>;\n  user_firstname_eq?: Maybe<Scalars['String']>;\n  user_firstname_exists?: Maybe<Scalars['Boolean']>;\n  user_firstname_in?: Maybe<Array<Scalars['String']>>;\n  user_firstname_neq?: Maybe<Scalars['String']>;\n  user_firstname_nin?: Maybe<Array<Scalars['String']>>;\n  user_firstname_startswith?: Maybe<Scalars['String']>;\n  user_id_eq?: Maybe<Scalars['Float']>;\n  user_id_exists?: Maybe<Scalars['Boolean']>;\n  user_id_ge?: Maybe<Scalars['Float']>;\n  user_id_gt?: Maybe<Scalars['Float']>;\n  user_id_in?: Maybe<Array<Scalars['ID']>>;\n  user_id_le?: Maybe<Scalars['Float']>;\n  user_id_lt?: Maybe<Scalars['Float']>;\n  user_id_neq?: Maybe<Scalars['Float']>;\n  user_id_nin?: Maybe<Array<Scalars['ID']>>;\n  user_like?: Maybe<Scalars['String']>;\n  user_not?: Maybe<Array<UsersWhere>>;\n  user_or?: Maybe<Array<UsersWhere>>;\n  user_search?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateTodoInput = {\n  done?: Maybe<Scalars['Boolean']>;\n  task?: Maybe<Scalars['String']>;\n  user_id?: Maybe<Scalars['ID']>;\n};\n\nexport type UpdateUserInput = {\n  firstname?: Maybe<Scalars['String']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  _boolean: Scalars['Boolean'];\n  _float: Scalars['Float'];\n  _int: Scalars['Int'];\n  _nest: User;\n  _string: Scalars['String'];\n  firstname: Scalars['String'];\n  id: Scalars['ID'];\n  todos?: Maybe<Array<Maybe<Todo>>>;\n};\n\n\nexport type User_FloatArgs = {\n  fixed?: Maybe<Scalars['Int']>;\n  max?: Maybe<Scalars['Float']>;\n  min?: Maybe<Scalars['Float']>;\n};\n\n\nexport type User_IntArgs = {\n  max?: Maybe<Scalars['Int']>;\n  min?: Maybe<Scalars['Int']>;\n};\n\n\nexport type User_StringArgs = {\n  casing?: Maybe<Scalars['String']>;\n  full?: Maybe<Scalars['Boolean']>;\n  length?: Maybe<Scalars['Int']>;\n  locale?: Maybe<Scalars['String']>;\n  max?: Maybe<Scalars['Int']>;\n  min?: Maybe<Scalars['Int']>;\n  nationality?: Maybe<Scalars['String']>;\n  pool?: Maybe<Scalars['String']>;\n  sentences?: Maybe<Scalars['Int']>;\n  syllables?: Maybe<Scalars['Int']>;\n  template?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  words?: Maybe<Scalars['Int']>;\n};\n\n\nexport type UserFirstnameArgs = {\n  length?: Maybe<Scalars['Int']>;\n};\n\n\nexport type UserTodosArgs = {\n  dir?: Maybe<Scalars['String']>;\n  limit?: Maybe<Scalars['Int']>;\n  page?: Maybe<Scalars['Int']>;\n  ref?: Maybe<Scalars['String']>;\n  sort?: Maybe<Scalars['String']>;\n  where?: Maybe<TodosWhere>;\n};\n\nexport type UsersWhere = {\n  and?: Maybe<Array<UsersWhere>>;\n  firstname_contains?: Maybe<Scalars['String']>;\n  firstname_endswith?: Maybe<Scalars['String']>;\n  firstname_eq?: Maybe<Scalars['String']>;\n  firstname_exists?: Maybe<Scalars['Boolean']>;\n  firstname_in?: Maybe<Array<Scalars['String']>>;\n  firstname_neq?: Maybe<Scalars['String']>;\n  firstname_nin?: Maybe<Array<Scalars['String']>>;\n  firstname_startswith?: Maybe<Scalars['String']>;\n  id_eq?: Maybe<Scalars['Float']>;\n  id_ge?: Maybe<Scalars['Float']>;\n  id_gt?: Maybe<Scalars['Float']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_le?: Maybe<Scalars['Float']>;\n  id_lt?: Maybe<Scalars['Float']>;\n  id_neq?: Maybe<Scalars['Float']>;\n  id_nin?: Maybe<Array<Scalars['ID']>>;\n  like?: Maybe<Scalars['String']>;\n  not?: Maybe<Array<UsersWhere>>;\n  or?: Maybe<Array<UsersWhere>>;\n  search?: Maybe<Scalars['String']>;\n};\n\nexport type _Entity = Todo | User;\n\nexport type _Service = {\n  __typename?: '_Service';\n  sdl?: Maybe<Scalars['String']>;\n};\n\nexport type CreateTodoMutationVariables = Exact<{\n  input: CreateTodoInput;\n}>;\n\n\nexport type CreateTodoMutation = { __typename?: 'Mutation', createTodo: { __typename?: 'Todo', id: string, task: string, done: boolean } };\n\nexport type DeleteTodoMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type DeleteTodoMutation = { __typename?: 'Mutation', deleteTodo: string };\n\nexport type UpdateTodoMutationVariables = Exact<{\n  id: Scalars['ID'];\n  input: UpdateTodoInput;\n}>;\n\n\nexport type UpdateTodoMutation = { __typename?: 'Mutation', updateTodo: { __typename?: 'Todo', id: string, task: string, done: boolean } };\n\nexport type TodosQueryVariables = Exact<{\n  page?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  input?: Maybe<TodosWhere>;\n  sort?: Maybe<Scalars['String']>;\n  direction?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type TodosQuery = { __typename?: 'Query', todos?: Array<{ __typename?: 'Todo', id: string, task: string, done: boolean } | null | undefined> | null | undefined };\n\n\nexport const CreateTodoDocument = `\n    mutation createTodo($input: CreateTodoInput!) {\n  createTodo(input: $input) {\n    id\n    task\n    done\n  }\n}\n    `;\nexport const useCreateTodoMutation = <\n      TError = unknown,\n      TContext = unknown\n    >(options?: UseMutationOptions<CreateTodoMutation, TError, CreateTodoMutationVariables, TContext>) =>\n    useMutation<CreateTodoMutation, TError, CreateTodoMutationVariables, TContext>(\n      'createTodo',\n      (variables?: CreateTodoMutationVariables) => fetcher<CreateTodoMutation, CreateTodoMutationVariables>(CreateTodoDocument, variables)(),\n      options\n    );\nexport const DeleteTodoDocument = `\n    mutation deleteTodo($id: ID!) {\n  deleteTodo(id: $id)\n}\n    `;\nexport const useDeleteTodoMutation = <\n      TError = unknown,\n      TContext = unknown\n    >(options?: UseMutationOptions<DeleteTodoMutation, TError, DeleteTodoMutationVariables, TContext>) =>\n    useMutation<DeleteTodoMutation, TError, DeleteTodoMutationVariables, TContext>(\n      'deleteTodo',\n      (variables?: DeleteTodoMutationVariables) => fetcher<DeleteTodoMutation, DeleteTodoMutationVariables>(DeleteTodoDocument, variables)(),\n      options\n    );\nexport const UpdateTodoDocument = `\n    mutation updateTodo($id: ID!, $input: UpdateTodoInput!) {\n  updateTodo(id: $id, input: $input) {\n    id\n    task\n    done\n  }\n}\n    `;\nexport const useUpdateTodoMutation = <\n      TError = unknown,\n      TContext = unknown\n    >(options?: UseMutationOptions<UpdateTodoMutation, TError, UpdateTodoMutationVariables, TContext>) =>\n    useMutation<UpdateTodoMutation, TError, UpdateTodoMutationVariables, TContext>(\n      'updateTodo',\n      (variables?: UpdateTodoMutationVariables) => fetcher<UpdateTodoMutation, UpdateTodoMutationVariables>(UpdateTodoDocument, variables)(),\n      options\n    );\nexport const TodosDocument = `\n    query Todos($page: Int, $limit: Int, $input: TodosWhere, $sort: String, $direction: String) {\n  todos(page: $page, limit: $limit, where: $input, sort: $sort, dir: $direction) {\n    id\n    task\n    done\n  }\n}\n    `;\nexport const useTodosQuery = <\n      TData = TodosQuery,\n      TError = unknown\n    >(\n      variables?: TodosQueryVariables,\n      options?: UseQueryOptions<TodosQuery, TError, TData>\n    ) =>\n    useQuery<TodosQuery, TError, TData>(\n      variables === undefined ? ['Todos'] : ['Todos', variables],\n      fetcher<TodosQuery, TodosQueryVariables>(TodosDocument, variables),\n      options\n    );","import produce from 'immer';\nimport React from 'react';\n\ninterface DataItem {\n  id: string;\n  task: string;\n  done: boolean;\n}\n\ninterface TodoState {\n  currentPage: number;\n  pageSize: number;\n  hasMore: boolean;\n  filterMode: FilterMode;\n  inputMode: InputMode;\n  query: string;\n}\n\nconst enum ActionType {\n  TogglePage,\n  ToggleFilter,\n  ToggleMode,\n  SearchItem,\n}\n\nenum FilterMode {\n  All = 'all',\n  Active = 'active',\n  Done = 'done',\n}\n\nenum InputMode {\n  Add,\n  Search,\n  None,\n}\n\ninterface Action {\n  type: ActionType;\n  numericPayload?: number;\n  stringPayload?: string;\n}\n\nconst TodoStateContext = React.createContext<TodoState | null>(null);\nconst TodoDispatchContext = React.createContext<React.Dispatch<Action> | null>(\n  null,\n);\n\nfunction todoReducer(state: TodoState, action: Action): TodoState {\n  switch (action.type) {\n    case ActionType.TogglePage: {\n      return produce(state, (draft) => {\n        if (action.numericPayload == null) {\n          throw new Error(`${action.type}: payload not specified`);\n        }\n\n        draft.currentPage = action.numericPayload;\n      });\n    }\n    case ActionType.ToggleFilter: {\n      return produce(state, (draft) => {\n        const filterKey = action.stringPayload;\n        if (filterKey == null || !(filterKey in FilterMode)) {\n          throw new Error(`${action.type}: filter ${filterKey} not found`);\n        }\n\n        draft.filterMode = FilterMode[filterKey as keyof typeof FilterMode];\n        draft.currentPage = 1;\n      });\n    }\n    case ActionType.ToggleMode: {\n      return produce(state, (draft) => {\n        const inputMode = action.numericPayload;\n        if (inputMode == null || !(inputMode in InputMode)) {\n          throw new Error(`${action.type}: input mode ${inputMode} not found`);\n        }\n\n        if (draft.inputMode !== inputMode) {\n          draft.inputMode = inputMode;\n          draft.filterMode = FilterMode.All;\n          draft.currentPage = 1;\n        }\n      });\n    }\n    default: {\n      throw new Error(`Unhandled action type`);\n    }\n  }\n}\n\nconst TodoProvider = ({\n  children,\n  reducer = todoReducer,\n}: {\n  children: React.ReactNode;\n  reducer?: (state: TodoState, action: Action) => TodoState;\n}): JSX.Element => {\n  const [state, dispatch] = React.useReducer(reducer, {\n    currentPage: 1,\n    pageSize: 5,\n    hasMore: false,\n    filterMode: FilterMode.All,\n    inputMode: InputMode.Add,\n    query: '',\n  });\n\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        {children}\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n};\n\nfunction useTodoState(): TodoState {\n  const context = React.useContext(TodoStateContext);\n  if (context === null) {\n    throw new Error('useTodoState hook works in the context of a TodoProvider');\n  }\n\n  return context;\n}\n\nfunction useTodoDispatch(): React.Dispatch<Action> {\n  const context = React.useContext(TodoDispatchContext);\n  if (context === null) {\n    throw new Error(\n      'useTodoDispatch hook works in the context of a TodoProvider ',\n    );\n  }\n\n  return context;\n}\n\nexport {\n  TodoProvider,\n  useTodoState,\n  useTodoDispatch,\n  todoReducer,\n  ActionType,\n  FilterMode,\n  InputMode,\n};\n\nexport type { DataItem, Action };\n","import { useRef } from 'react';\nimport styled from 'styled-components/macro';\nimport type { SwipeCallback, TapCallback } from 'react-swipeable';\nimport { LEFT, useSwipeable } from 'react-swipeable';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst Wrapper = styled.div`\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n`;\n\nconst BackgroundLayer = styled.div`\n  position: absolute;\n  z-index: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 0 1.5rem;\n  color: white;\n  background-color: #c70000;\n`;\n\nconst ForegroundLayer = styled.div`\n  position: relative;\n  z-index: 1;\n  height: 100%;\n  width: 100%;\n  background-color: #fff;\n  display: flex;\n  align-items: center;\n`;\n\nconst SwipeToDelete = ({\n  children,\n  threshold = 0.3,\n  onSwiped,\n  onTap,\n}: {\n  children: React.ReactNode;\n  threshold?: number;\n  onSwiped?: SwipeCallback;\n  onTap?: TapCallback;\n}): JSX.Element | null => {\n  const foregroundRef = useRef<HTMLDivElement | null>(null);\n  const backgroundRef = useRef<HTMLDivElement | null>(null);\n\n  const swipeableHandlers = useSwipeable({\n    trackMouse: false,\n    preventDefaultTouchmoveEvent: true,\n    onTap,\n    onSwipeStart: () => {\n      if (foregroundRef.current) {\n        foregroundRef.current.style.transition = '';\n        foregroundRef.current.style.transform = '';\n      }\n    },\n    onSwiping: (eventData) => {\n      if (foregroundRef.current) {\n        const transform = `translateX(${eventData.deltaX}px)`;\n        foregroundRef.current.style.transform = transform;\n      }\n\n      if (backgroundRef.current) {\n        const opacity = Math.min(Math.abs(eventData.deltaX) / 100, 1);\n        backgroundRef.current.style.opacity = opacity.toFixed(2);\n      }\n    },\n    onSwiped: (eventData) => {\n      if (!foregroundRef.current) {\n        return;\n      }\n\n      let left = eventData.deltaX;\n      const { offsetWidth } = foregroundRef.current;\n      if (Math.abs(left) >= offsetWidth * threshold) {\n        left = eventData.dir === LEFT ? -offsetWidth * 2 : offsetWidth;\n\n        if (onSwiped) {\n          onSwiped(eventData);\n        }\n      } else {\n        left = 0;\n      }\n\n      foregroundRef.current.style.transition = 'transform 0.5s ease-out';\n      foregroundRef.current.style.transform = `translateX(${left}px)`;\n    },\n  });\n\n  const refPassthrough = (element: HTMLDivElement): void => {\n    swipeableHandlers.ref(element);\n    foregroundRef.current = element;\n  };\n\n  return (\n    <Wrapper>\n      <BackgroundLayer ref={backgroundRef}>\n        <FontAwesomeIcon\n          icon={faTrashAlt}\n          fixedWidth\n          style={{ marginRight: 'auto' }}\n        />\n        <FontAwesomeIcon icon={faTrashAlt} fixedWidth />\n      </BackgroundLayer>\n      <ForegroundLayer\n        onMouseDown={swipeableHandlers.onMouseDown}\n        ref={refPassthrough}\n      >\n        {children}\n      </ForegroundLayer>\n    </Wrapper>\n  );\n};\n\nexport { SwipeToDelete };\n","import styled from 'styled-components/macro';\nimport { useQueryClient } from 'react-query';\nimport type { DataItem } from '../../../context/todo';\nimport {\n  useDeleteTodoMutation,\n  useUpdateTodoMutation,\n} from '../../../generated';\nimport { SwipeToDelete } from './SwipeToDelete';\n\nconst ListItem = styled.li<{ done: boolean }>`\n  background-color: #fff;\n  border: none;\n  border-bottom: 0.1rem solid #ddd;\n\n  &:last-child {\n    border-bottom: none;\n  }\n\n  ${(props) =>\n    props.done &&\n    `\n    text-decoration: line-through;\n    color: #aaa;  \n    `}\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin: 1rem 0;\n  min-height: 2rem;\n`;\n\nconst Checkbox = styled.input.attrs({ type: 'checkbox' })`\n  flex: 1 0 auto;\n  margin: 0 1.5rem;\n  height: 2rem;\n  width: 2rem;\n`;\n\nconst Label = styled.label`\n  margin-right: auto;\n  display: flex;\n  align-items: center;\n`;\n\nconst TodoItem = ({ data }: { data: DataItem }): JSX.Element => {\n  const { id, task, done } = data;\n  const queryClient = useQueryClient();\n  const { mutate: updateTodo } = useUpdateTodoMutation({\n    onSuccess: async () => queryClient.invalidateQueries('Todos'),\n  });\n\n  const { mutate: deleteTodo } = useDeleteTodoMutation({\n    onSuccess: async () => queryClient.invalidateQueries('Todos'),\n  });\n\n  const handleTap = (): void => {\n    updateTodo({ id, input: { done: !done } });\n  };\n\n  const handleSwipe = (): void => {\n    deleteTodo({ id });\n  };\n\n  return (\n    <ListItem done={done}>\n      <SwipeToDelete onSwiped={handleSwipe} onTap={handleTap}>\n        <Wrapper>\n          <Label htmlFor={id}>\n            <Checkbox id={id} checked={done} />\n            {task}\n          </Label>\n          {/* <ImageButton onClick={handleClick} aria-label=\"Delete Item\">\n            <FontAwesomeIcon icon={faTrashAlt} />\n          </ImageButton> */}\n        </Wrapper>\n      </SwipeToDelete>\n    </ListItem>\n  );\n};\n\nexport { TodoItem };\n","import { FilterMode, useTodoState } from '../../context/todo';\nimport type { TodosQuery } from '../../generated';\nimport { useTodosQuery } from '../../generated';\n\nconst enum SortDirection {\n  Ascending = 'asc',\n  Descending = 'desc',\n}\n\nconst useTodos = (): {\n  data: TodosQuery | undefined;\n  isFetching: boolean;\n  isPreviousData: boolean;\n  hasMoreData: boolean;\n} => {\n  const { currentPage, pageSize, filterMode } = useTodoState();\n  let input = null;\n  if (filterMode === FilterMode.Active) {\n    input = { done_eq: false };\n  } else if (filterMode === FilterMode.Done) {\n    input = { done_eq: true };\n  }\n\n  const queryVariables = {\n    page: currentPage,\n    limit: pageSize,\n    input,\n    sort: 'id',\n    direction: SortDirection.Descending,\n  };\n\n  const { data, isFetching, isPreviousData } = useTodosQuery(queryVariables, {\n    keepPreviousData: true,\n    staleTime: 5000,\n  });\n\n  const { data: nextData } = useTodosQuery({\n    ...queryVariables,\n    page: currentPage + 1,\n  });\n\n  return {\n    data,\n    isFetching,\n    isPreviousData,\n    hasMoreData: nextData?.todos?.length != null && nextData.todos.length > 0,\n  };\n};\n\nexport { useTodos };\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport type { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport { reportWebVitals };\n/* eslint-enable @typescript-eslint/no-floating-promises */\n","import styled from 'styled-components/macro';\n\nconst StyledHeader = styled.h1`\n  margin: 0;\n  padding-bottom: 2rem;\n  text-align: center;\n  text-transform: uppercase;\n`;\n\nconst Header = (): JSX.Element => {\n  return <StyledHeader>Things to do</StyledHeader>;\n};\n\nexport { Header };\n","import styled from 'styled-components/macro';\n\nconst ImageButton = styled.button.attrs({ type: 'button' })`\n  background-color: transparent;\n  border: 0;\n  font-size: calc(max(2rem, 20px));\n  transition: 0.3s all;\n  opacity: 0.4;\n\n  &:enabled {\n    cursor: pointer;\n  }\n\n  &:hover:enabled {\n    opacity: 1;\n  }\n`;\n\nexport { ImageButton };\n","import styled from 'styled-components/macro';\nimport { faPlus, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport type { MouseEvent } from 'react';\nimport { ImageButton } from '../../common/ImageButton';\nimport {\n  ActionType,\n  InputMode,\n  useTodoDispatch,\n  useTodoState,\n} from '../../../context/todo';\n\nconst ActionList = styled.ul`\n  flex: 0 0 auto;\n  list-style-type: none;\n  border-right: 0.1rem solid #ccc;\n  margin-right: 1.8rem;\n  padding: 0;\n`;\n\nconst ActionItem = styled.li`\n  display: inline;\n`;\n\nconst ActionButton = styled(ImageButton)<{ active: boolean }>`\n  margin: 0 0.8rem 0 0;\n\n  ${(props) => props.active && `opacity: 1;`}\n`;\n\nconst Actions = (): JSX.Element => {\n  const { inputMode: mode } = useTodoState();\n  const dispatch = useTodoDispatch();\n\n  const handleClick = (e: MouseEvent<HTMLButtonElement>): void => {\n    dispatch({\n      type: ActionType.ToggleMode,\n      numericPayload: parseInt(e.currentTarget.value, 10),\n    });\n  };\n\n  return (\n    <ActionList>\n      <ActionItem>\n        <ActionButton\n          active={mode === InputMode.Add}\n          value={InputMode.Add}\n          aria-label=\"Create Mode\"\n          onClick={handleClick}\n        >\n          <FontAwesomeIcon icon={faPlus} fixedWidth />\n        </ActionButton>\n      </ActionItem>\n      <ActionItem>\n        <ActionButton\n          active={mode === InputMode.Search}\n          value={InputMode.Search}\n          aria-label=\"Search Mode\"\n          onClick={handleClick}\n        >\n          <FontAwesomeIcon icon={faSearch} fixedWidth />\n        </ActionButton>\n      </ActionItem>\n    </ActionList>\n  );\n};\n\nexport { Actions };\n","import styled from 'styled-components/macro';\nimport {\n  ActionType,\n  FilterMode,\n  useTodoDispatch,\n  useTodoState,\n} from '../../../context/todo';\n\nconst FilterList = styled.ul`\n  flex: 0 0 auto;\n  list-style-type: none;\n  padding-left: 0;\n`;\n\nconst FilterItem = styled.li`\n  display: inline;\n`;\n\nconst Button = styled.button.attrs({ type: 'button' })<{ active: boolean }>`\n  text-transform: capitalize;\n  background-color: transparent;\n  color: inherit;\n  margin: 0.3rem;\n  padding: 0.3rem 0.7rem;\n  text-decoration: none;\n  border: 0.1rem solid transparent;\n  border-radius: 0.3rem;\n\n  &:hover {\n    border-color: rgba(175, 47, 47, 0.1);\n  }\n\n  ${(props) =>\n    props.active &&\n    `\n    border-color: rgba(175, 47, 47, 0.2);\n  `}\n`;\n\nconst Filter = (): JSX.Element => {\n  const { filterMode: mode } = useTodoState();\n  const dispatch = useTodoDispatch();\n\n  function toggleFilter(key: string): void {\n    dispatch({ type: ActionType.ToggleFilter, stringPayload: key });\n  }\n\n  return (\n    <FilterList>\n      {Object.entries(FilterMode).map(([key, value]) => (\n        <FilterItem key={key}>\n          <Button active={value === mode} onClick={() => toggleFilter(key)}>\n            {value}\n          </Button>\n        </FilterItem>\n      ))}\n    </FilterList>\n  );\n};\n\nexport { Filter };\n","import styled from 'styled-components/macro';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  ActionType,\n  useTodoDispatch,\n  useTodoState,\n} from '../../../context/todo';\nimport { useTodos } from '../useTodos';\nimport { ImageButton } from '../../common/ImageButton';\n\nconst PaginationList = styled.ul`\n  margin-right: auto;\n  list-style-type: none;\n  padding: 0;\n`;\n\nconst PaginationItem = styled.li`\n  display: inline;\n`;\n\nconst Pagination = (): JSX.Element => {\n  const { currentPage: page } = useTodoState();\n  const dispatch = useTodoDispatch();\n  const { isPreviousData, hasMoreData } = useTodos();\n\n  return (\n    <>\n      Current page: {page}\n      <PaginationList>\n        <PaginationItem>\n          <ImageButton\n            aria-label=\"Previous Page\"\n            onClick={() =>\n              dispatch({\n                type: ActionType.TogglePage,\n                numericPayload: Math.max(page - 1, 1),\n              })\n            }\n            disabled={page === 1}\n          >\n            <FontAwesomeIcon icon={faChevronLeft} fixedWidth />\n          </ImageButton>\n        </PaginationItem>\n        <PaginationItem>\n          <ImageButton\n            aria-label=\"Next Page\"\n            onClick={() =>\n              dispatch({\n                type: ActionType.TogglePage,\n                numericPayload: hasMoreData ? page + 1 : page,\n              })\n            }\n            disabled={isPreviousData || !hasMoreData}\n          >\n            <FontAwesomeIcon icon={faChevronRight} fixedWidth />\n          </ImageButton>\n        </PaginationItem>\n      </PaginationList>\n    </>\n  );\n};\n\nexport { Pagination };\n","import styled from 'styled-components/macro';\nimport { Actions } from '../Actions';\nimport { Filter } from '../Filter';\nimport { Pagination } from '../Pagination';\n\nconst StyledFooter = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: baseline;\n  border-top: 0.1rem solid #ddd;\n  background-color: #f4fce8;\n  margin: 0 -2rem -1rem -2rem;\n  padding: 0 2rem;\n  color: #707070;\n`;\n\nconst Footer = (): JSX.Element => {\n  return (\n    <StyledFooter>\n      <Actions />\n      <Pagination />\n      <Filter />\n    </StyledFooter>\n  );\n};\n\nexport { Footer };\n","import type { KeyboardEvent } from 'react';\nimport { useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport styled from 'styled-components/macro';\nimport { ActionType, useTodoDispatch } from '../../../context/todo';\nimport { useCreateTodoMutation } from '../../../generated';\n\nconst StyledInput = styled.input.attrs({\n  type: 'text',\n})`\n  display: block;\n  width: 100%;\n  height: 3.4rem;\n  padding: 0.6rem 1.2rem;\n  font-size: 1.4rem;\n  line-height: 1.42857143;\n  color: #555;\n  background-color: #fff;\n  border: 1px solid #ccc;\n`;\n\nconst InputBox = (): JSX.Element => {\n  const [value, setValue] = useState('');\n  const dispatch = useTodoDispatch();\n  const queryClient = useQueryClient();\n  const { mutate } = useCreateTodoMutation<Error>({\n    onSuccess: async () => {\n      queryClient.invalidateQueries('Todos');\n      setValue('');\n      dispatch({ type: ActionType.TogglePage, numericPayload: 1 });\n    },\n  });\n\n  const handleKeyUp = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (e.code === 'Enter') {\n      // TODO: implement user management\n      mutate({ input: { task: value.trim(), done: false, user_id: '1' } });\n    }\n  };\n\n  return (\n    <StyledInput\n      placeholder=\"Add New\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      onKeyUp={handleKeyUp}\n    />\n  );\n};\n\nexport { InputBox, StyledInput };\n","import type { ChangeEvent } from 'react';\nimport {\n  ActionType,\n  useTodoDispatch,\n  useTodoState,\n} from '../../../context/todo';\nimport { StyledInput } from '../InputBox';\n\nconst SearchBox = (): JSX.Element => {\n  const { query } = useTodoState();\n  const dispatch = useTodoDispatch();\n\n  function handleChange(e: ChangeEvent<HTMLInputElement>): void {\n    const { value } = e.target;\n    dispatch({ type: ActionType.SearchItem, stringPayload: value });\n  }\n\n  return (\n    <StyledInput placeholder=\"Search\" value={query} onChange={handleChange} />\n  );\n};\n\nexport { SearchBox };\n","import { InputMode, useTodoState } from '../../../context/todo';\nimport { InputBox } from '../InputBox';\nimport { SearchBox } from '../SearchBox';\n\nconst InputToggle = (): JSX.Element | null => {\n  const { inputMode: mode } = useTodoState();\n\n  switch (mode) {\n    case InputMode.Add: {\n      return <InputBox />;\n    }\n    case InputMode.Search: {\n      return <SearchBox />;\n    }\n    default: {\n      return null;\n    }\n  }\n};\n\nexport { InputToggle };\n","import styled from 'styled-components/macro';\nimport { TodoItem } from './TodoItem/TodoItem';\nimport { useTodos } from './useTodos';\nimport { Header } from './Header';\nimport { Footer } from './Footer';\nimport { InputToggle } from './InputToggle';\n\nconst Section = styled.section`\n  background-color: #fff;\n  padding: 2rem 2rem 1rem 2rem;\n  border: 0.1rem solid #ddd;\n  border-radius: 0.2rem;\n  margin: 3rem auto;\n  min-width: 32rem;\n  max-width: 60rem;\n  position: relative;\n`;\n\nconst StyledList = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n`;\n\nconst TodoList = (): JSX.Element => {\n  const { data } = useTodos();\n\n  return (\n    <Section>\n      <Header />\n      <InputToggle />\n\n      <StyledList>\n        {data?.todos?.map(\n          (todo) => todo && <TodoItem key={todo.id} data={todo} />,\n        )}\n      </StyledList>\n      <Footer />\n      {/* {isFetching && (\n        <p style={{ position: 'absolute', left: 10, bottom: 10 }}>\n          <Spinner /> Loading...\n        </p>\n      )} */}\n    </Section>\n  );\n};\n\nexport { TodoList };\n","import { QueryCache, QueryClient } from 'react-query';\nimport toast from 'react-hot-toast';\n\nconst queryClient = new QueryClient({\n  queryCache: new QueryCache({\n    onError: (error) =>\n      toast.error(`Something went wrong: ${(error as Error).message}`),\n  }),\n});\n\nexport { queryClient };\n","import { QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nimport { Toaster } from 'react-hot-toast';\nimport { TodoList } from '../TodoList';\nimport { TodoProvider } from '../../context/todo';\nimport { queryClient } from './queryClient';\n\nconst App = (): JSX.Element => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TodoProvider>\n        <TodoList />\n      </TodoProvider>\n      <Toaster />\n      <ReactQueryDevtools initialIsOpen />\n    </QueryClientProvider>\n  );\n};\n\nexport { App };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport { reportWebVitals } from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}